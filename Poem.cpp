//// Created by Тимур Ахметзянов on 12.10.2023.//#include "Poem.h"#include <iostream>Poem::Poem(char *start): start_(start) {  strophe_.resize(14);  for (int i = 0; i < 14; ++i) {    strophe_[i] = -1;  }  auto it1 = start;  auto it2 = start;  while (*it2 != '\0') {    if (*it2 == '\n') {      ++it2;      lines_.push_back(Line(it1, it2));      it1 = it2;      continue;    }    ++it2;  }  end_ = it2;}void Poem::makePoem() {  for (int i = 0; i < 14; ++i) {    strophe_[i] = getRhyme(i);  }}int Poem::getRandLine() {  std::srand(std::time(nullptr));  int r;  for(;;) {    r = std::rand() % int(lines_.size());    if (!inPoem(r)) {      break;    }  }  return r;}int Poem::getRhyme(int idx) {  if (idx == 0 || idx == 2 || idx == 4 ||      idx == 5 || idx == 8 || idx == 9 || idx == 12) {    return getRandLine();  }  int start = getRandLine();  int i = start;  for(;;) {    if (inPoem(start)) {      ++start;      continue;    }    if (isRhyme(idx, start)) {      break;    }    ++start;    if (start == lines_.size()) {      start = 0;    }    if (start == i) {      strophe_[getSecondIdx(idx)] = getRandLine();    }  }  return start;}bool Poem::isRhyme(int idx, int line_idx) {  int cnt = 0;  int s_line = strophe_[getSecondIdx(idx)];  auto it1 = lines_[line_idx].getEnd();  auto it2 = lines_[s_line].getEnd();  --it2;  --it1;  while (cnt != 5) {    while (!isLetter(it1)) {      --it1;    }    while (!isLetter(it2)) {      --it2;    }    if (*it1 != *it2) {      return false;    }    ++cnt;    --it1;    --it2;  }  return true;}int Poem::getSecondIdx(int i) {  if (i == 1) return 0;  if (i == 3) return 2;  if (i == 6) return 4;  if (i == 7) return 5;  if (i == 10) return 9;  if (i == 11) return 8;  return 12;}std::ostream &operator<<(std::ostream &out, const Poem &poem) {  for (int i : poem.strophe_) {    out << poem.lines_[i];  }  return out;}bool Poem::inPoem(int idx) {  bool stop = false;  for (int i = 0; i < 14; ++i) {    if (strophe_[i] == idx) {      stop = true;      break;    }  }  return stop;}bool Poem::isLetter(const char* it) {  if (*it != ',' && *it != '.' && *it != '!' && *it != ' '      && *it != '?' && *it != '-' && *it != ';' && *it != '\n'      && *it != ':' && *it != '"' && *it != '^' && *it != '\r') {    return true;  }  return false;}